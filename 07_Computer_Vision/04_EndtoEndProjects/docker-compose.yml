version: '3.8'

services:

  # 1. RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # RabbitMQ (AMQP)
      - "15672:15672"   # RabbitMQ Web UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5      
    networks:
      - backend

  # 2. PostgreSQL Database
  db:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpass
      POSTGRES_DB: violations_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5      
    networks:
      - backend

  # 3. Frame Reader Service
  frame_reader:
    build: ./services/frame_reader
    container_name: frame_reader
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      CAMERA_URL: ${CAMERA_URL}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest    
      RABBITMQ_QUEUE: frame_queue
      RABBITMQ_EXCHANGE: video_exchange
      RABBITMQ_ROUTING_KEY: video_frame
      #VIDEO_SOURCE: /data/pizza.mp4      
    networks:
      - backend      
    volumes:
      - ./data:/data
      - ./logs:/app/logs
      

  # 4. Detection Service
  detection_service:
    build: ./services/detection_service
    container_name: detection_service
    depends_on:
      rabbitmq:
        condition: service_healthy
      db: 
        condition: service_healthy             
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest    
      RABBITMQ_QUEUE: frame_queue
      RABBITMQ_EXCHANGE: video_exchange  
      RABBITMQ_ROUTING_KEY: video_frame      
      DB_HOST: db
      DB_NAME: violations_db
      DB_USER: admin
      DB_PASS: adminpass        
      MODEL_PATH: app/models/yolo12m-v2.pt
      OUTPUT_PATH: /processed_frames
    volumes:
      - ./services/detection_service:/app
      - ./shared/processed_frames:/processed_frames
      - ./logs:/app/logs
    ports:
      - "8001:8000"
    networks:
      - backend

  # # 5. Streaming Service
  # streaming_service:
  #   build: ./services/streaming_service
  #   container_name: streaming_service
  #   depends_on:
  #     detection_service:
  #       condition: service_started
  #     db: 
  #       condition: service_healthy          
  #   environment:
  #     FRAMES_PATH: /processed_frames
  #     METADATA_PATH: /processed_frames/metadata.json
  #     STREAM_PORT: 8000    
  #     DB_HOST: db
  #     DB_NAME: violations_db
  #     DB_USER: admin
  #     DB_PASS: adminpass      
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./services/streaming_service:/app
  #     - ./shared/processed_frames:/processed_frames    
  #     - ./data:/data       
  #     - ./logs:/app/logs       
  #   networks:
  #     - backend

  # # 6. Frontend UI
  # frontend:
  #   build: ./frontend
  #   container_name: frontend
  #   depends_on:
  #     streaming_service:
  #       condition: service_started
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production      
  #   volumes:
  #     - ./frontend:/app
  #   networks:
  #     - backend

  # # 7. Admin Panel
  # admin_panel:
  #   build: ./services/admin_panel
  #   container_name: admin_panel
  #   ports:
  #     - "8501:8501"  # Streamlit/Gradio/etc
  #   depends_on:
  #     - db
  #   networks:
  #     - backend

  # # 8. Auth/Login Service
  # auth:
  #   build: ./services/auth
  #   container_name: auth
  #   environment:
  #     DB_HOST: db
  #     DB_NAME: violations_db
  #     DB_USER: admin
  #     DB_PASS: adminpass
  #   ports:
  #     - "5000:5000"  # Example
  #   depends_on:
  #     - db
  #   networks:
  #     - backend

  # # 9. Alert Service (Email/SMS)
  # alert_service:
  #   build: ./services/alerts
  #   container_name: alert_service
  #   environment:
  #     EMAIL_SERVER: smtp.gmail.com
  #     EMAIL_USER: your_email@gmail.com
  #     EMAIL_PASS: your_app_password
  #     TWILIO_SID: your_sid
  #     TWILIO_TOKEN: your_token
  #   depends_on:
  #     detection_service:
  #       condition: service_started
  #   networks:
  #     - backend

  # # 10. PDF Report Generator
  # pdf_generator:
  #   build: ./services/pdf_generator
  #   container_name: pdf_generator
  #   networks:
  #     - backend
  #   depends_on:
  #     - db

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge      
