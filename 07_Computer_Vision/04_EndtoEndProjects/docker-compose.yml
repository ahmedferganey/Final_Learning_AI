
services:

  # 1. RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"       # For internal communication (pika)
      - "15672:15672"     # Management UI http://localhost:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Frame Reader Service
  frame_reader:
    build: 
      context: ./services/frame_reader
      dockerfile: frame-reader.Dockerfile      
    container_name: frame_reader
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      RABBITMQ_PORT: 5672      
      RABBITMQ_QUEUE: frame_queue
      RABBITMQ_EXCHANGE: video_exchange
      RABBITMQ_ROUTING_KEY: video_frame
      VIDEO_SOURCES:  "rtsp://admin:password@192.168.1.100:554/stream1, /app/videos/pizza.mp4, 0"
      SOURCE_NAMES:  "security_cam, pizza, webcam"      
    healthcheck:
      test: ["CMD-SHELL", "ping -c 1 rabbitmq || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3      
    volumes:
      - ./shared/data/videos:/app/videos    
      - ./.env:/app/.env:ro      
    networks:
      - backend

  # 3. detection_service
  detection_service:
    build:
      context: ./services/detection_service
      dockerfile: detection-service.Dockerfile
    container_name: detection_service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      RABBITMQ_PORT: 5672
      RABBITMQ_QUEUE: frame_queue
      RABBITMQ_EXCHANGE: video_exchange
      RABBITMQ_ROUTING_KEY: video_frame
      MODEL_PATH: /app/models/yolo12m-v2.pt
      STREAM_ENDPOINT: http://localhost:9000/stream
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: violations_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      STREAM_QUEUE: annotated_frames      
    volumes:
      - ./.env:/app/.env:ro
      - ./shared/data/videos:/app/videos
    networks:
      - backend

  # 4. postgres
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: violations_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # 5. streaming_service
  streaming_service:
    build:
      context: ./services/streaming_service
      dockerfile: streaming-service.Dockerfile
    container_name: streaming_service
    ports:
      - "9000:9000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_QUEUE: annotated_frames
    networks:
      - backend
      
  # 6. ui_frontend
  ui_frontend:
    build:
      context: ./services/ui_frontend
      dockerfile: ui-frontend.Dockerfile
    container_name: ui_frontend
    ports:
      - "3000:80"
    depends_on:
      - streaming_service
    networks:
      - backend
      
networks:
  backend:
    name: app_network
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
    name: rabbitmq_data          

